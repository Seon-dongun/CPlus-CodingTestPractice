#include<bits/stdc++.h>
using namespace std;
string str, bad_string;
struct node{
    bool end_mark;
    node *next[10];
    node()
    {
        end_mark = false;
        for(int i = 0; i<10; i++)
            next[i] = NULL;
    }
}*root;

//기본적으로 하나의 노드는 a~j까지 각 알파벳의 연결 관계를 나타내기 위해서 10개의 node 포인터가 존재함. 문어발 마냥 root에 a~j까지 가리키는 노드 포인터, 그 a~j 각각에
// 또 a~j까지 노드포인터, 쭉쭉쭉 이런식으로 트리가 만들어지게 되는 것.
// 현재 본인의 알파벳이 문자열의 가장 마지막 알파벳인지 확인하기 위한 end_mark가 존재한다. 

bool add(string s)
{
    node *current = root;
    for(int i = 0; i<s.size(); i++)
    {
        int nw = s[i] - 'a';
        if(i == (s.size()-1) && current->next[nw] != NULL) // 트리를 타면서 오는데, 검사하는 현재 문자열 끝까지 봤는데도 모든 정보가 이미 트리 상에 저장이 되어있는 경우.
                                                           // 현재 문자열이 기존 저장된 문자열에 포함되는데, 기존 저장된 문자열이 길이가 더 긴 경우
            return false;
        if(current->next[nw] == NULL) // 트리에 해당 알파벳에 대한 정보가 없는 경우, 정보를 추가
            current->next[nw] = new node();
        current = current->next[nw]; // 다음 알파벳으로 이동
        if(current->end_mark) // 만약 현재 알파벳이 문자열 끝 부분이라면, 즉 트리를 타고타고 왔는데 기존 문자열 정보랑 현재 검사하는 문자열 정보랑 계속 같아서 같은 방향으로
                // 진행되고 있었는데 기존에 저장되어 있던 문자열 끝까지 온 경우이기 때문에 현재 검사를 하고 있는 문자열에 포함되는 문자열 정보가 있기 때문에 bad string이 되는 것.
                // 기존 문자열이 현재 문자열에 포함되는데, 현재 문자열이 길이가 더 긴 경우. 이 경우는 아무리 길어도 기존 문자열 길이만큼만 현재 문자열에 겹칠 수 있기 때문에
                // 기존 문자열 길이만큼만 검사해도 되는 것.
            return false;
    }
    current->end_mark = true; // 만약 문자열이 겹치지 않는 경우 해당 문자열 맨 끝을 알려주기 위해서 end_mark를 true로 세팅
    return true; // 위에서 겹치는 현상이 발생하지 않고 반복문을 통과한 상황이므로, 겹치는 문제가 일어나지 않았기 때문에 true를 리턴한다
}

int main()
{
    int i, N;
    bool ok = true;
    cin >> N;
    root = new node();
    for(i = 1; i<=N; i++)
    {
        cin >> str;
        if(!ok) // 겹침 문제는 한 번만 발생하는 거여서 한 번 찾아냈다면 이후 입력되는 문자열에 대해서는 작업이 필요없기 때문에 continue로 스킵
            continue;
        ok = add(str); // false를 리턴 받았다면 겹치는 문제가 생긴 것, true를 리턴 받았다면 겹치는 문제가 없었다는 것
        if(!ok) // 겹치는 문제가 생겼다면 현재 문자열이 겹침 문제가 발생한 문자열임을 알 수 있음
            bad_string = str;
    }
    if(ok)
        printf("GOOD SET\n");
    else
    {
        printf("BAD SET\n");
        cout << bad_string << endl;
    }
}
