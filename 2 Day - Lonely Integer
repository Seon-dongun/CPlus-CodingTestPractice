#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

//---------------------------------------------구현부
int lonelyinteger(vector<int> a) {
    int result=0;
    for(int i = 0; i < a.size(); i++) {
        result ^= a[i]; // 중요한 것은 XOR 연산을 통해서 같은 두 숫자는 연산 결과가 0이 되는 것. 숫자가 섞여있어도 결국 연산 순서만 다를 뿐 같은 두 숫자를 XOR 연산한다는 결과는
                        // 동일하기 때문에 2개씩 있는 숫자는 결국 연산해서 0이 된다. 남는 유일한 숫자는 나머지 숫자의 연산 결과인 0이랑 XOR 연산을 하고 결국 자기 자신이 결과가 됨.
    }
    return result;
}
//-----------------------------------------------------

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string a_temp_temp;
    getline(cin, a_temp_temp);

    vector<string> a_temp = split(rtrim(a_temp_temp));

    vector<int> a(n);

    for (int i = 0; i < n; i++) {
        int a_item = stoi(a_temp[i]);

        a[i] = a_item;
    }

    int result = lonelyinteger(a);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
