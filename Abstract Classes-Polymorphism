#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};
//----------------------작성 시작부---------------------------------
class LRUCache : public Cache {
public:
    LRUCache() {}
    int cnt = 0;
    LRUCache(int capacity) {
        cp = capacity;
    }

    void set(int key, int value) {
        Node *tmp;
        int flag = 0;
        if (mp.empty()) {
            tmp = new Node(key, value);
            head = tmp;
            tail = tmp;
            mp.insert(make_pair(key, tmp));
            cnt++;
            return ;
        }
        if (mp.find(key)!=mp.end()) {
            mp.find(key)->second->value = value;
            if (mp.size() == 1) {
                return;
            }

            tmp = mp.find(key)->second;
            if (tmp == tail) {
                tail->prev->next = nullptr;
                tail = tail->prev;
                tmp->prev = nullptr;
                tmp->next = head;
                head->prev = tmp;
                head = tmp;
            }
            else if (tmp != head) {
                tmp->prev->next = tmp->next;
                tmp->next->prev = tmp->prev;
                tmp->prev = nullptr;
                tmp->next = head;
                head->prev = tmp;
                head = tmp;
            }
           
        }

        else {
            cnt++; 
            tmp = new Node(key, value);
            if (cp < cnt) {
                mp.erase(tail->key);

                tail->prev->next = nullptr;
                tail = tail->prev;
                cnt--;
            }
            
            tmp->prev = nullptr; 
            tmp->next = head; 
            head->prev = tmp; 
            head = tmp;

            mp.insert(make_pair(key, tmp)); 

        }

    }

    int get(int key) {
        map<int, Node*>::iterator it;
        for (it = mp.begin(); it != mp.end(); it++) {
            if (key == it->first)
                return it->second->value;
        }
        return -1;
    }


};
//---------------------------------작성 끝 -----------------------------------------------

int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
